import scipy.io.wavfile
import time
import numpy as np
import matplotlib.pyplot as plt
import pylab
from scipy.signal import butter, lfilter, iirdesign
from pylab import *
import scipy.signal as signal
from scipy.fftpack import fft, ifft


def robs_lfilter(b, a, x):
    max_asum = 0
    max_bsum = 0
    lenx = len(x)
    #lenx = 13
    y = [0 for i in range(0,lenx)]
    for n in range(0,lenx):
	bsum = 0
	asum = 0
	#print 'n %g' % n
	for nb,num in enumerate(b):
	    #print 'nb %g' % nb
	    if (n-nb) < 0:
		bsum += 0
		#print 'b[%g] %g, x[%g] %g, term %g, bsum %g' % (nb, b[nb], n-nb, 0, 0, bsum)
	    else:
		bsum += b[nb]*x[n-nb]
		#print 'b[%g] %g, x[%g] %g, term %g, bsum %g' % (nb, b[nb], n-nb, x[n-nb], b[nb]*x[n-nb], bsum)
	for na,num in enumerate(a[1:]):
	    rna = na+1
	    if (n-rna) < 0:
		asum += 0
		#print 'a[%g] %g, y[%g] %g, term %g, asum %g' % (rna, a[rna], n-rna, 0, 0, asum)
	    else:
		asum += a[rna]*y[n-rna]
		#print 'a[%g] %g, y[%g] %g, term %g, asum %g' % (rna, a[rna], n-rna, y[n-rna], a[rna]*y[n-rna], asum)
	    #print 'term %g' % a[rna]*y[n-rna]
	y[n] = int(((int(bsum) - int(asum)) / int(a[0])))
	if max_asum < asum:
	    max_asum = asum
	if max_bsum < bsum:
	    max_bsum = bsum
	#print 'bsum %.1f asum %.1f y[%g] %.1f' % (bsum, asum, n, y[n])
	#print 'y[%g] %g' % (n, y[n])

	#y[n] = (b*x - a*y)/2
	#y[n] = (b[0]*x[n] + b[1]*x[n-1] + b[2]*x[n-2] - a[1]*y[n-1] -a[2]*y[n-2])/2
    print 'max %g %g' % (max_asum, max_bsum)
    return y

#a[0]*y[n] = b[0]*x[n] + b[1]*x[n-1] + ... + b[nb]*x[n-nb]
                        #- a[1]*y[n-1] - ... - a[na]*y[n-na]

def makegraph(data, filename):
    plt.clf()
    plt.plot(data)
    plt.savefig(filename)

def ellip_bandpass_filter(data):
    print data
    print type(data[1])
    bgain = 100000000
    again = 100000000
    #b,a = iirdesign(wp = [0.2, 0.225], ws= [0.19, 0.23], gstop= 50, gpass=6, ftype='ellip') # 8000 hz version
    #b,a = iirdesign(wp = [0.25, 0.75], ws= [0.23, 0.77], gstop= 50, gpass=6, ftype='ellip') # 8000 hz version
    #b,a = iirdesign(wp = 0.25, ws= 0.30, gstop= 50, gpass=6, ftype='ellip') # 8000 hz version
    b,a = iirdesign(wp = 0.046, ws= 0.055, gstop= 50, gpass=6, ftype='ellip') # 44100 hz version
    #b,a = iirdesign(wp = [0.61, 0.67], ws= [0.63, 0.65], gstop= 50, gpass=6, ftype='ellip') # notch
    #for i,number in enumerate(b):
	#if abs(number) < 1e-15:
	    #b[i] = 0
	#else:
	    #b[i] = int(number*bgain)
    #for i,number in enumerate(a):
	#if abs(number) < 1e-15:
	    #a[i] = 0
	#else:
	    #a[i] = int(number*again)
    print 'int64_t a[] = ',
    print '{',
    for num in a:
        print '%g,' % num,
    print '\b\b };'
    print 'int64_t b[] = ',
    print '{',
    for num in b:
        print('%g,' % num),
    print '\b\b };'
    print len(a)
    print len(b)
    y = robs_lfilter(b, a, data)
    for i,num in enumerate(y):
	#y[i] = y[i]/100000000
	y[i] = y[i]
    return y





data = np.genfromtxt('data.txt', delimiter=', ', names=True, skiprows=5)
list_data = [list(row) for row in data]
matt = np.mat(list_data)

array_matt1 = np.array(matt[:,1])

data_2d_list = []
fft_2d_list = []

num_columns = 7

num_samples = len(array_matt1)

#sample_freq = 8000
sample_freq = 44100
nyquist_freq = sample_freq / 2

#plt.figure(1)
wf = np.linspace(0.0, nyquist_freq, num_samples/2)
for j in range(0,num_columns,1):
    #if j not in data_2d_list:
    data_2d_list.append([])
    array_matt = np.array(matt[:,j])
    for i,row in enumerate(array_matt):
        for element in row:
            data_2d_list[j].append(int64(element-1500))
    if j not in fft_2d_list:
        fft_2d_list.append([])
    fft_temp_list = fft(data_2d_list[j])
    for i,element in enumerate(fft_temp_list):
        fft_2d_list[j].append(element)
    #if j != 0:
	#plt.plot(data_2d_list[j], label = str(j))
        #plt.semilogy(wf, 2.0/num_samples * np.abs(fft_2d_list[j][0:num_samples/2]), label = str(j))
    if j in [1,2]:
	#plt.plot(data_2d_list[j], label = str(j))
	plt.semilogy(wf, 2.0/num_samples * np.abs(fft_2d_list[j][0:num_samples/2]), label = str(j))
	for i,sample in enumerate(data_2d_list[j]):
	    data_2d_list[j][i] = data_2d_list[j][i]*1000000000
	filtered_snippet = ellip_bandpass_filter(data_2d_list[j])
	#plt.plot(filtered_snippet)
	plt.semilogy(wf, 2.0/num_samples * np.abs(filtered_snippet[0:num_samples/2]), label = str(j))


data = np.genfromtxt('test.txt', delimiter=', ', names=True, skiprows=5)
print data
list_data = [list(row) for row in data]
print list_data



sound_tup = scipy.io.wavfile.read('/mnt/hgfs/vmware_share/Unacuna Cry Analyzer Tests/short ben.wav', 'r')

sound_data = list(sound_tup[1])
print len(sound_data)

snippet_length = 750
num_samples = snippet_length
sample_freq = 44100
nyquist_freq = sample_freq / 2


#ben_times_of_interest = [0.299, 2.105, 3.422, 5.104, 9.160, 9.786, 10.742, 6.935, 7.020, 7.078, 7.161]
ben_times_of_interest = [0.299]
times_of_interest = ben_times_of_interest
samples_of_interest = [(int) (x*sample_freq - snippet_length/2) for x in times_of_interest]

thefile = open('test.txt', 'w')

#"""
for i in samples_of_interest:
    sound_data_snippet = sound_data[i:i+snippet_length]
    for item in sound_data_snippet:
	print>>thefile, item
    for i,sample in enumerate(sound_data_snippet):
	sound_data_snippet[i] = sound_data_snippet[i]*100000000
    filtered_snippet = ellip_bandpass_filter(sound_data_snippet)
    for i,sample in enumerate(sound_data_snippet):
	sound_data_snippet[i] = sound_data_snippet[i]/100000000
    fft_of_sound = fft(sound_data_snippet)

    fft_of_filtered_sound = fft(filtered_snippet)
    sum_of_filter = 0
    for number in fft_of_filtered_sound:
        sum_of_filter = sum_of_filter + np.abs(number)
    print sum_of_filter

    wf = np.linspace(0, nyquist_freq, num_samples/2)
    try:
	pylab.figure(figsize=(12,9))
	#plt.plot(sound_data_snippet)
	#plt.plot(filtered_snippet)
	#pylab.figure(figsize=(12,9))
	plt.semilogy(wf[1:num_samples/2], 2.0/num_samples * np.abs(fft_of_sound[1:num_samples/2]))
	plt.semilogy(wf[1:num_samples/2], 2.0/num_samples * np.abs(fft_of_filtered_sound[1:num_samples/2]))
    except ValueError:
	print "not plotting because data is all zeroes"
    #pylab.xlim([0,4000])
    plt.grid()
#"""


plt.show()

